<div
  x-data="{
    init() {
      this.isInitialized = true
      $refs.initialOptions.id = ''
      $refs.initialOptions.hidden = true

      this.allOptions = [...$refs.initialOptions.children].map((el) => ({label: el.textContent, value: el.value}))
      this.filteredOptions = this.allOptions
      $watch('value', value => {
        this.filteredOptions = this.allOptions.filter(opt => this.isDirty ? opt.label.toLowerCase().startsWith(value.toLowerCase()) : true)
        if(value === '') this.reset()
      })
      $watch('isDropdownVisible', value => {
        if(!value && !this.selectedValue) this.activeItem = undefined
      })
    },
    isInitialized: false,
    isDropdownVisible: false,
    isDirty: false,
    value: '',
    selectedValue: '',
    activeItem: undefined,
    filteredOptions: [],
    allOptions: [],
    reset(){
      this.value = ''
      this.selectedValue = ''
      this.activeItem = undefined
    },
    setSelectedValue(el) {
      if(el){
        this.activeItem = el
      }
      this.value = this.activeItem.textContent;
      this.selectedValue = this.activeItem.textContent;
      this.isDropdownVisible = false;
      this.isDirty = false;
    },
    focusFirst(){
      const el = [...$refs.comboboxOptions.getElementsByTagName('LI')][0]
      if(el){
        el.scrollIntoView({ block: 'nearest', inline: 'nearest' })
        this.activeItem = el
      }
    },
    focusLast(){
      const el = [...$refs.comboboxOptions.getElementsByTagName('LI')].slice(-1)[0]
      if(el){
        el.scrollIntoView({ block: 'nearest', inline: 'nearest' })
        this.activeItem = el
      }
    },
    focusNext(){
      const options = [...$refs.comboboxOptions.getElementsByTagName('LI')]
      if(this.isDropdownVisible){
        const activeElIdx = options.findIndex(el => this.activeItem ? el.id === this.activeItem.id : false)
        const nextEl = options[activeElIdx + 1]
        if(nextEl){
          nextEl.scrollIntoView({ block: 'nearest', inline: 'nearest' })
          this.activeItem = nextEl
        } else {
          this.focusFirst()
        }
      }else{
        this.isDropdownVisible = true
        $nextTick(() => {
          window.requestAnimationFrame(() => {
            this.focusCurrent()
          })
        })
      }
    },
    focusPrev(){
      const options = [...$refs.comboboxOptions.getElementsByTagName('LI')]
      if(this.isDropdownVisible){
        const activeElIdx = options.findIndex(el => this.activeItem ? el.id === this.activeItem.id : false)
        const prevEl = options[activeElIdx - 1]

        if(prevEl){
          prevEl.scrollIntoView({ block: 'nearest', inline: 'nearest' })
          this.activeItem = prevEl
        } else {
          this.focusLast()
        }
      }else{
        this.isDropdownVisible = true
        $nextTick(() => {
          window.requestAnimationFrame(() => {
              this.focusCurrent()
          })
        })
      }
    },
    focusCurrent(){
      const options = [...$refs.comboboxOptions.getElementsByTagName('LI')]
      const current = options.find(el => el.textContent === this.selectedValue)
      console.log(this.selectedValue, current)
      if(current){
        this.activeItem = current
      }else{
        this.focusFirst()
      }
    },
    checkValidSelection(){
      this.value = this.selectedValue ? this.selectedValue : ''
    }
  }"
>
  <div class="max-w-lg">
    <label for="timepicker" class="block">Appointment time</label>
    <div id="input-hint" class="text-gray-50">hh:mm</div>

    <select id="timepicker" x-ref="initialOptions" x-show="!isInitialized">
      {% for combobox in comboboxes %}
        <option value="{{- combobox.value -}}">{{- combobox.label -}}</option>
      {% endfor %}
    </select>

    <div class="relative mt-2 max-w-[10rem]">
      <template x-if="isInitialized">
        <div>
          <div class="flex w-full">
            <input
              id="timepicker"
              type="text"
              x-ref="input"
              x-model="value"
              @focus="isDropdownVisible = true"
              @blur="isDropdownVisible = false; checkValidSelection()"
              @input="isDropdownVisible = true; isDirty = true;"
              @keydown.prevent.up="focusPrev()"
              @keydown.prevent.down="focusNext()"
              @keydown.prevent.enter="setSelectedValue()"
              class="pr-10 p-2 bg-transparent w-full h-10 border border-gray-60 focus:outline focus:outline-offset-0 focus:outline-4 focus:outline-blue-40v invalid:ring-4 invalid:ring-red-60v invalid:border-transparent invalid:outline-offset-4"
              role="combobox"
              aria-describedby="input-hint"
              aria-controls="options"
              aria-expanded="false"
              autocapitalize="off"
              autocomplete="off"
              :aria-activedescendant="activeItem ? activeItem.id : undefined"
            >
            <div class="absolute z-10 inset-y-0 right-0 flex">
              <template x-if="selectedValue">
                <button
                  type="button"
                  aria-label="clear input"
                  @mousedown.prevent=""
                  @mouseup.prevent="reset(); $focus.focus($refs.input);"
                  tabindex="-1"
                  class="h-full px-1 flex items-center focus:outline focus:-outline-offset-4 focus:outline-4 focus:outline-blue-40v/60 bg-transparent"
                  ><div class="icon-[material-symbols--close] h-6 w-6 align-middle text-gray-50"></div>
                </button>
              </template>
              <button
                type="button"
                aria-label="toggle options"
                @mousedown.prevent=""
                @mouseup.prevent="isDropdownVisible = !isDropdownVisible;"
                tabindex="-1"
                class="h-full px-1 flex items-center focus:outline focus:-outline-offset-4 focus:outline-4 focus:outline-blue-40v/60 bg-transparent">
                <div class="icon-[material-symbols--keyboard-arrow-down] h-8 w-8 align-middle text-gray-50"></div>
              </button>
            </div>
          </div>
          <ul
            x-show="isDropdownVisible"
            class="absolute border border-t-0 border-gray-60 bg-white max-h-52 overflow-y-scroll w-full"
            id="options"
            role="listbox"
            x-ref="comboboxOptions"
            >
            <template x-for="option in filteredOptions" :key="option.value">
              <li
                :id="$id('option')"
                @mousedown.prevent=""
                @mouseup.prevent="setSelectedValue($el)"
                :aria-selected="option.label === selectedValue"
                :data-active-item="!!activeItem ? option.value === activeItem.dataset.value : null"
                :data-value="option.value"
                class="p-2 cursor-pointer aria-selected:bg-blue-60v aria-selected:text-white data-[active]:outline data-[active]:outline-4 data-[active]:outline-blue-40v data-[active]:-outline-offset-4"
                role="option"
                tabindex="-1"
                x-text="option.label"
              >
              </li>
            </template>
            <template x-if="filteredOptions.length === 0">
              <li class="p-2 cursor-not-allowed">
                No results found
              </li>
            </template>
          </ul>
        </div>
      </template>
    </div>
  </div>
</div>
